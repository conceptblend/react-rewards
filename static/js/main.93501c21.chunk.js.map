{"version":3,"sources":["Layout.js","ContentRow.js","EarningsDisplay.js","utils.js","AnimatedEarningsDisplay.js","App.js","index.js"],"names":["Layout","props","className","children","ContentRow","EarningsDisplay","amount","formattedAmount","format","Math","round","toLocaleString","style","currency","formatDollarAmount","bgWidth","percentage","id","width","rewardsTypeDescription","defaultProps","AnimatedEarningsDisplay","steps","increment","interval","state","animatedAmount","isAnimating","prevProps","this","clearInterval","setInterval","tick","bind","amt","setState","React","Component","App","rewardsPercentage","rewardsTypeEnum","cashback","points","rewardsType","earnedRewards","changeValue","rewardsTypeDesription","event","parseFloat","target","value","getRewardsTypeDescription","getEarnedRewards","htmlFor","onSubmit","e","stopPropagation","preventDefault","type","step","aria-describedby","placeholder","onChange","display","data-toggle","tabIndex","name","defaultChecked","autoComplete","ReactDOM","render","document","getElementById"],"mappings":"kLAMeA,EAJA,SAAAC,GACX,OAAO,yBAAKC,UAAU,aAAaD,EAAME,WCS9BC,EAVI,SAAAH,GACf,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,oDACVD,EAAME,YCHvB,IAAME,EAAkB,SAACJ,GACrB,ICA+BK,EDA3BC,EAAkBN,EAAMK,QAAU,EAGtCC,EACqB,WAAjBN,EAAMO,QCJqBF,EDKNC,ECJlBE,KAAKC,MAAMJ,GAAQK,eAAe,UALtC,SAA4BL,GAC/B,OAAOA,EAAOK,eAAe,QAAS,CAAEC,MAAO,WAAYC,SAAU,QDS/DC,CAAmBP,GAEzB,IAAIQ,EAA6B,IAAnBd,EAAMe,WAEpB,OACI,uBAAGd,UAAU,OAAOe,GAAG,kBAAvB,iBAEI,0BAAMA,GAAG,qBACL,0BAAMA,GAAG,aAAaL,MAAO,CAAEM,MAAOH,EAAQ,OAC9C,4BAAQE,GAAG,WAAWV,IAJ9B,OAOI,0BAAML,UAAU,gBACXD,EAAMkB,wBARf,MAeRd,EAAgBe,aAAe,CAC3Bd,OAAQ,EACRU,WAAY,EACZG,uBAAwB,WAGbd,QE2CAgB,E,YA1EX,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KAEDK,OAASL,EAAMK,OACpB,EAAKgB,MAAQ,GACb,EAAKC,UAAY,EAAKjB,OAAS,EAAKgB,MACpC,EAAKE,SAAW,KAEhB,EAAKC,MAAQ,CACTC,eAAgB,EAChBC,aAAa,EACbX,WAAY,GAXD,E,gFAiBAY,GACXC,KAAK5B,MAAMK,SAAWsB,EAAUtB,SAChCwB,cAAcD,KAAKL,UAGnBK,KAAKvB,OAASuB,KAAK5B,MAAMK,OACzBuB,KAAKN,UAAYM,KAAKvB,OAASuB,KAAKP,MAGpCO,KAAKL,SAAWO,YAAYF,KAAKG,KAAKC,KAAKJ,MAAO,O,6CAOtDC,cAAcD,KAAKL,Y,6BAInB,IAAIU,EAAML,KAAKJ,MAAMC,eAAiBG,KAAKN,UAKvCW,EAAML,KAAKvB,OACXuB,KAAKM,SAAS,CACVT,eAAgBQ,EAChBP,aAAa,EACbX,WAAYkB,EAAML,KAAKvB,UAG3BwB,cAAcD,KAAKL,UAEnBK,KAAKM,SAAS,CACVT,eAAgB,EAChBC,aAAa,EACbX,WAAY,O,+BAMpB,OACI,kBAAC,EAAD,iBACQa,KAAK5B,MADb,CAEIK,OACIuB,KAAKJ,MAAME,YACLE,KAAKJ,MAAMC,eACXG,KAAKvB,OAEfU,WAAYa,KAAKJ,MAAME,YAAcE,KAAKJ,MAAMT,WAAa,S,GArEvCoB,IAAMC,WC2J7BC,E,YAzJX,WAAYrC,GAAQ,IAAD,8BACf,4CAAMA,KAEDsC,kBAAoB,GACzB,EAAKC,gBAAkB,CACnBC,SAAU,UACVC,OAAQ,UAGZ,EAAKjB,MAAQ,CACTkB,YAAa,EAAKH,gBAAgBC,SAClCnC,OAAQ,EACRsC,cAAe,GAGnB,EAAKC,YAAc,EAAKA,YAAYZ,KAAjB,gBAfJ,E,uFAkBOU,GACtB,IAAIG,EAAwB,GAC5B,OAAQjB,KAAKJ,MAAMkB,aACf,KAAKd,KAAKW,gBAAgBC,SACtBK,EAAwB,YACxB,MACJ,KAAKjB,KAAKW,gBAAgBE,OACtBI,EAAwB,SACxB,MACJ,QACIA,EAAwB,GAGhC,OAAOA,I,yCAIP,IACIF,EADAtC,EAASuB,KAAKJ,MAAMnB,QAAU,EAGlC,OAAQuB,KAAKJ,MAAMkB,aACf,KAAKd,KAAKW,gBAAgBC,SACtBG,EAAiBtC,EAASuB,KAAKU,kBAAqB,IACpD,MACJ,KAAKV,KAAKW,gBAAgBE,OACtBE,EAAgBtC,EAASuB,KAAKU,kBAKtC,OAAOK,I,kCAGCG,GACRlB,KAAKM,SAAS,CACV7B,OAAQ0C,WAAWD,EAAME,OAAOC,W,+BAI9B,IAAD,OACC/B,EAAyBU,KAAKsB,0BAChCtB,KAAKJ,MAAMkB,aAGf,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CACIrC,OAAQuB,KAAKuB,mBACbjC,uBAAwBA,EACxBX,OAAQqB,KAAKJ,MAAMkB,cAEvB,8BAEJ,kBAAC,EAAD,KACI,2BAAOU,QAAQ,UAAf,gDAGA,0BAAMnD,UAAU,OAAOoD,SAAU,SAACC,GAC1BA,EAAEC,kBACFD,EAAEE,mBAEN,yBAAKvD,UAAU,mBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,MAEJ,2BACIwD,KAAK,SACLC,KAAK,IACLzD,UAAU,eACVe,GAAG,SACH2C,mBAAiB,+CACjBC,YAAY,kBACZC,SAAUjC,KAAKgB,eAGvB,2BAAO3C,UAAU,cAAjB,2BAMZ,kBAAC,EAAD,KACI,yBACIe,GAAG,SACHf,UAAU,0CACVU,MAAO,CAAEmD,QAAS,QAClBC,cAAY,WAEZ,2BACI9D,UAAW,4BAA8B2B,KAAKJ,MAAMkB,cAAgBd,KAAKW,gBAAgBC,SAAW,SAAW,IAC/GwB,SAAS,IACTH,SAAU,SAACP,GAAD,OACN,EAAKpB,SAAS,CACVQ,YAAa,EAAKH,gBAAgBC,aAI1C,2BACIiB,KAAK,QACLQ,KAAK,UACLjD,GAAG,UACHiC,MAAM,2BACNiB,eAAgBtC,KAAKJ,MAAMkB,cAAgBd,KAAKW,gBAAgBC,SAChE2B,aAAa,QAfrB,aAmBA,2BACIlE,UAAW,4BAA8B2B,KAAKJ,MAAMkB,cAAgBd,KAAKW,gBAAgBE,OAAS,SAAW,IAC7GuB,SAAS,IACTH,SAAU,SAACP,GACP,EAAKpB,SAAS,CACVQ,YAAa,EAAKH,gBAAgBE,WAI1C,2BACIgB,KAAK,QACLQ,KAAK,UACLjD,GAAG,UACHiC,MAAM,yBACNiB,eAAgBtC,KAAKJ,MAAMkB,cAAgBd,KAAKW,gBAAgBE,OAChE0B,aAAa,QAfrB,iB,GAhINhC,IAAMC,WCAxBgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.93501c21.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Layout = props => {\n    return <div className=\"container\">{props.children}</div>;\n};\n\nexport default Layout;\n","import React from \"react\";\n\nconst ContentRow = props => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 col-md-8 offset-md-2 col-lg-6 offset-lg-3\">\n                {props.children}\n            </div>\n        </div>\n    );\n};\n\nexport default ContentRow\n","import React from \"react\";\nimport { formatDollarAmount, formatPointsAmount } from './utils';\n\nconst EarningsDisplay = (props) => {\n    let formattedAmount = props.amount || 0\n\n    /* Format the amount as 'points' or (default:) 'dollars' */\n    formattedAmount =\n        props.format === 'points'\n        ? formatPointsAmount(formattedAmount)\n        : formatDollarAmount(formattedAmount)\n    \n    let bgWidth = props.percentage * 100\n\n    return (\n        <p className=\"lead\" id=\"rewards-phrase\">\n            You'd earn&nbsp;\n            <span id=\"rewards-container\">\n                <span id=\"rewards-bg\" style={{ width: bgWidth+\"%\" }}></span>\n                <strong id=\"rewards\">{formattedAmount}</strong>\n            </span>\n            &nbsp;\n            <span className=\"rewards-type\">\n                {props.rewardsTypeDescription}\n            </span>\n            !\n        </p>\n    );\n}\n\nEarningsDisplay.defaultProps = {\n    amount: 0,\n    percentage: 1,\n    rewardsTypeDescription: \"unknown\",\n}\n\nexport default EarningsDisplay;\n","export function formatDollarAmount(amount) {\n    return amount.toLocaleString('en-CA', { style: 'currency', currency: 'CAD' });\n}\n\nexport function formatPointsAmount(amount) {\n    return Math.round(amount).toLocaleString('en-CA');\n}\n","import React from \"react\";\n\nimport EarningsDisplay from \"./EarningsDisplay\";\n\nclass AnimatedEarningsDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.amount = props.amount;\n        this.steps = 24;\n        this.increment = this.amount / this.steps;\n        this.interval = null;\n\n        this.state = {\n            animatedAmount: 0,\n            isAnimating: false,\n            percentage: 0\n        };\n    }\n    /*\n        When the props update, determine if we need to start the animation over, again, based on the amount provided.\n        */\n    componentDidUpdate(prevProps) {\n        if (this.props.amount !== prevProps.amount) {\n            clearInterval(this.interval);\n\n            // Prepare animation values\n            this.amount = this.props.amount;\n            this.increment = this.amount / this.steps;\n\n            // Create animation\n            this.interval = setInterval(this.tick.bind(this), 50);\n        }\n    }\n    /*\n        When the component is being removed, do a possibliy redundant action to remove the interval.\n        */\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    tick() {\n        let amt = this.state.animatedAmount + this.increment;\n\n        //console.log(\"Tick... \" + this.interval + \" // \" + amt);\n\n        /* If we're below the limit, keep going. Otherwise, clear the interval and stop */\n        if (amt < this.amount) {\n            this.setState({\n                animatedAmount: amt,\n                isAnimating: true,\n                percentage: amt / this.amount\n            });\n        } else {\n            clearInterval(this.interval);\n            /* Just in case, we're gonna make sure the last value is exactly the amount */\n            this.setState({\n                animatedAmount: 0,\n                isAnimating: false,\n                percentage: 0 /* reset the percentage */\n            });\n        }\n    }\n\n    render() {\n        return (\n            <EarningsDisplay\n                {...this.props}\n                amount={\n                    this.state.isAnimating\n                        ? this.state.animatedAmount\n                        : this.amount\n                }\n                percentage={this.state.isAnimating ? this.state.percentage : 1}\n            />\n        );\n    }\n}\n\nexport default AnimatedEarningsDisplay;\n","import React from \"react\";\nimport Layout from \"./Layout\";\nimport ContentRow from \"./ContentRow\";\nimport AnimatedEarningsDisplay from \"./AnimatedEarningsDisplay\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.rewardsPercentage = 0.5;\n        this.rewardsTypeEnum = {\n            cashback: \"dollars\",\n            points: \"points\"\n        };\n\n        this.state = {\n            rewardsType: this.rewardsTypeEnum.cashback,\n            amount: 0,\n            earnedRewards: 0\n        };\n\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    getRewardsTypeDescription(rewardsType) {\n        let rewardsTypeDesription = \"\";\n        switch (this.state.rewardsType) {\n            case this.rewardsTypeEnum.cashback:\n                rewardsTypeDesription = \"cash back\";\n                break;\n            case this.rewardsTypeEnum.points:\n                rewardsTypeDesription = \"points\";\n                break;\n            default:\n                rewardsTypeDesription = \"\";\n                break;\n        }\n        return rewardsTypeDesription;\n    }\n\n    getEarnedRewards() {\n        let amount = this.state.amount || 0,\n            earnedRewards;\n\n        switch (this.state.rewardsType) {\n            case this.rewardsTypeEnum.cashback:\n                earnedRewards = (amount * this.rewardsPercentage) / 100;\n                break;\n            case this.rewardsTypeEnum.points:\n                earnedRewards = amount * this.rewardsPercentage;\n                break;\n            default:\n                break;\n        }\n        return earnedRewards\n    }\n\n    changeValue(event) {\n        this.setState({\n            amount: parseFloat(event.target.value)\n        });\n    }\n\n    render() {\n        const rewardsTypeDescription = this.getRewardsTypeDescription(\n            this.state.rewardsType\n        );\n\n        return (\n            <Layout>\n                <ContentRow>\n                    <AnimatedEarningsDisplay\n                        amount={this.getEarnedRewards()}\n                        rewardsTypeDescription={rewardsTypeDescription}\n                        format={this.state.rewardsType}\n                    />\n                    <hr />\n                </ContentRow>\n                <ContentRow>\n                    <label htmlFor=\"amount\">\n                        How much do you spend each month? (or year!)\n                    </label>\n                    <form className=\"form\" onSubmit={(e) => {\n                            e.stopPropagation();\n                            e.preventDefault();\n                        }}>\n                        <div className=\"form-group mr-1\">\n                            <div className=\"input-group\">\n                                <div className=\"input-group-prepend\">\n                                    <span className=\"input-group-text\">$</span>\n                                </div>\n                                <input\n                                    type=\"number\"\n                                    step=\"1\"\n                                    className=\"form-control\"\n                                    id=\"amount\"\n                                    aria-describedby=\"How much do you spend each month? (or year!)\"\n                                    placeholder=\"Enter amount...\"\n                                    onChange={this.changeValue}\n                                />\n                            </div>\n                            <small className=\"text-muted\">\n                                An estimate will do.\n                            </small>\n                        </div>\n                    </form>\n                </ContentRow>\n                <ContentRow>\n                    <div\n                        id=\"method\"\n                        className=\"btn-group btn-group-toggle btn-group-sm\"\n                        style={{ display: 'flex' }}\n                        data-toggle=\"buttons\"\n                    >\n                        <label\n                            className={\"btn btn-outline-success \" + (this.state.rewardsType === this.rewardsTypeEnum.cashback ? 'active' : '')}\n                            tabIndex=\"0\"\n                            onChange={(e) =>\n                                this.setState({\n                                    rewardsType: this.rewardsTypeEnum.cashback\n                                })\n                            }\n                        >\n                            <input\n                                type=\"radio\"\n                                name=\"options\"\n                                id=\"option1\"\n                                value=\"rewardsTypeEnum.cashback\"\n                                defaultChecked={this.state.rewardsType === this.rewardsTypeEnum.cashback}\n                                autoComplete=\"off\"\n                            />\n                            Cash back\n                        </label>\n                        <label\n                            className={\"btn btn-outline-success \" + (this.state.rewardsType === this.rewardsTypeEnum.points ? 'active' : '')}\n                            tabIndex=\"0\"\n                            onChange={(e) => {\n                                this.setState({\n                                    rewardsType: this.rewardsTypeEnum.points\n                                });\n                            }}\n                        >\n                            <input\n                                type=\"radio\"\n                                name=\"options\"\n                                id=\"option2\"\n                                value=\"rewardsTypeEnum.points\"\n                                defaultChecked={this.state.rewardsType === this.rewardsTypeEnum.points}\n                                autoComplete=\"off\"\n                            />\n                            Points\n                        </label>\n                    </div>\n                </ContentRow>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}